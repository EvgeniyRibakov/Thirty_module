name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies with Poetry
      run: |
        poetry install --no-root

    - name: Run tests
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        poetry run python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Generate SECRET_KEY
      run: |
        echo "SECRET_KEY=$(python -c 'import secrets; print(secrets.token_urlsafe(50))')" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy project files to server
      run: |
          echo "Listing files in GitHub Actions runner before rsync:"
          ls -la
          echo "SSH_USER: ${{ secrets.SSH_USER }}"
          echo "SERVER_IP: ${{ secrets.SERVER_IP }}"
          echo "DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo SSH connection test successful"
          rsync -avzr -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" --exclude '__pycache__' --exclude '.git' --exclude '.gitignore' --exclude '.env.sample' ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Starting SSH script execution"
            echo "After rsync, listing contents of ${{ secrets.DEPLOY_DIR }}:"
            ls -la ${{ secrets.DEPLOY_DIR }}
            ls -la ${{ secrets.DEPLOY_DIR }}/config 2>/dev/null || echo "config directory not found"
            echo "Checking Docker and Compose versions:"
            docker --version
            docker compose version
            echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > ${{ secrets.DEPLOY_DIR }}/.env
            echo "DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:5432/${{ secrets.DB_NAME }}" >> ${{ secrets.DEPLOY_DIR }}/.env
            echo "REDIS_URL=redis://redis:6379/${{ secrets.REDIS_DB }}" >> ${{ secrets.DEPLOY_DIR }}/.env
            echo "DEBUG=False" >> ${{ secrets.DEPLOY_DIR }}/.env
            cd ${{ secrets.DEPLOY_DIR }}
            echo "Validating docker-compose.yml:"
            docker compose config
            docker compose down
            docker compose pull
            docker compose up -d --build
            echo "Docker containers status:"
            docker compose ps
            docker compose logs
          EOF