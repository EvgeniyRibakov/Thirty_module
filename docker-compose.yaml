name: Django CI/CD Pipeline

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Run tests
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
        run: |
          poetry run python manage.py test

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP}}
            echo "Starting deployment on server..."
            # Проверка и добавление пользователя в группу docker
            if ! groups | grep -q docker; then
              echo "Adding user to docker group..."
              sudo usermod -aG docker $USER
              echo "Reconnecting to apply group changes..."
              exit
            fi
            # Задержка перед повторным подключением
            sleep 5
            cd /home/test/django-app
            # Создание .env файла, если он отсутствует
            if [ ! -f .env ]; then
              echo "DJANGO_SECRET_KEY=$(openssl rand -base64 32)" > .env
              echo "DB_NAME=mydb" >> .env
              echo "DB_USER=postgres" >> .env
              echo "DB_PASSWORD=password" >> .env
              echo "DB_HOST=db" >> .env
              echo "DB_PORT=5432" >> .env
              echo "REDIS_HOST=redis" >> .env
              echo "REDIS_PORT=6379" >> .env
              echo "REDIS_DB=0" >> .env
              echo "STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key" >> .env
              echo "STRIPE_SECRET_KEY=your_stripe_secret_key" >> .env
              echo "EMAIL_HOST=smtp.your-email-provider.com" >> .env
              echo "EMAIL_PORT=587" >> .env
              echo "EMAIL_HOST_USER=your_email@example.com" >> .env
              echo "EMAIL_HOST_PASSWORD=your_email_password" >> .env
            fi
            git pull origin docker
            docker compose down
            docker compose up -d --build
            echo "Deployment completed. Checking container status..."
            docker compose ps
          EOF
